const std = @import("std");
const c8 = struct {
    usingnamespace @import("types.zig");
    usingnamespace @import("registers.zig");
    usingnamespace @import("cpu.zig");
    usingnamespace @import("rom.zig");
};
const expect = std.testing.expect;

test "1-chip8-logo" {
    var program_bin: [0x1000]u8 = [_]u8{0} ** 0x1000;
    const program_len = try c8.loadRom("roms/1-chip8-logo.ch8", &program_bin);

    var chip8: c8.Chip8 = .{};

    c8.setRom(&chip8, &program_bin, program_len);

    for (0..40) |_| {
        c8.runInstruction(&chip8);
    }

    // This is what the screen should look like
    const expected_screen: [c8.screen_height]u64 = .{
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000001111101000000000000000000001000000000011000000000000,
        0b0000000000000010000011010001100111000111010010011001000000000000,
        0b0000000000000010001010101010010100101001010010100000000000000000,
        0b0000000000000010001010001011110100101001010010010000000000000000,
        0b0000000000000010001010001010000100101001010010001000000000000000,
        0b0000000000000010001010001001110100100111001110110000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000011111000110000000110011111000000000001111111000000000,
        0b0000000000111111101110000001110111111100000000011100011100000000,
        0b0000000001110001101110000001110111001110000000111000001100000000,
        0b0000000011100000001110000000000111000110000000111000001100000000,
        0b0000000011100101001110000000110111000110000000111000001100000000,
        0b0000000011100000001111110001110111000110000000011100011000000000,
        0b0000000011101000101111111001110111000110111100001111110000000000,
        0b0000000011100111001110011101110111001110111100011100111000000000,
        0b0000000011100000001110001101110111111100000000111000011100000000,
        0b0000000011100000001110001101110111111000000001110000001100000000,
        0b0000000011100000001110001101110111000000000001110000001100000000,
        0b0000000011100000001110001101110111010100011101110000001100000000,
        0b0000000001110001101110001101110111011100000101111000011100000000,
        0b0000000000111111101110001101110111000100011000111111111000000000,
        0b0000000000011111001110001101110111000101011100011111110000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000111001100011010000000110000001010000110000000000000,
        0b0000000000000010010010100011100001000100100011101001000000000000,
        0b0000000000000010011110010010000000100100101010001111000000000000,
        0b0000000000000010010000001010000000010100101010001000000000000000,
        0b0000000000000010001110110001100001100011101001100111000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
    };
    try expect(std.mem.eql(u64, &expected_screen, &chip8.screen));

    // PC should loop with jump instruction
    try expect(chip8.registers.PC == 0x24e);
}

test "2-ibm-logo" {
    var program_bin: [0x1000]u8 = [_]u8{0} ** 0x1000;
    const program_len = try c8.loadRom("roms/2-ibm-logo.ch8", &program_bin);

    var chip8: c8.Chip8 = .{};

    c8.setRom(&chip8, &program_bin, program_len);

    for (0..21) |_| {
        c8.runInstruction(&chip8);
    }

    // This is what the screen should look like
    const expected_screen: [c8.screen_height]u64 = .{
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000001111111101111111110001111100000000011111001010000000,
        0b0000000000000000000000000000000000000000000000000000001010000000,
        0b0000000000001111111101111111111101111110000000111111000100000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000011110000011100011100011111000001111100001010000000,
        0b0000000000000000000000000000000000000000000000000000001110000000,
        0b0000000000000011110000011111110000011111110111111100000010000000,
        0b0000000000000000000000000000000000000000000000000000000010000000,
        0b0000000000000011110000011111110000011101111111011100000000000000,
        0b0000000000000000000000000000000000000000000000000000000100000000,
        0b0000000000000011110000011100011100011100111110011100000000000000,
        0b0000000000000000000000000000000000000000000000000000001110000000,
        0b0000000000001111111101111111111101111100011100011111000010000000,
        0b0000000000000000000000000000000000000000000000000000001100000000,
        0b0000000000001111111101111111110001111100001000011111001110000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
    };
    try expect(std.mem.eql(u64, &expected_screen, &chip8.screen));

    // PC should loop with jump instruction
    try expect(chip8.registers.PC == 0x228);
}

test "3-corax+" {
    var program_bin: [0x1000]u8 = [_]u8{0} ** 0x1000;
    const program_len = try c8.loadRom("roms/3-corax+.ch8", &program_bin);

    var chip8: c8.Chip8 = .{};

    c8.setRom(&chip8, &program_bin, program_len);

    for (0..306) |_| {
        c8.runInstruction(&chip8);
    }

    // This is what the screen should look like
    const expected_screen: [c8.screen_height]u64 = .{
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0011101010000000001110101000000000111010100000000011101110000000,
        0b0001100100010100000010010001010000111011100101000010001100010100,
        0b0000101010011000001100101001100000101000100110000011000010011000,
        0b0011101010010000001110101001000000111000100100000010001100010000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0010101010000000001110111000000000111011100000000011101110000000,
        0b0011100100010100001010110001010000111011000101000010000110010100,
        0b0000101010011000001010100001100000101000100110000011000010011000,
        0b0000101010010000001110111001000000111011000100000010001110010000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0011101010000000001110111000000000111011100000000011101110000000,
        0b0011000100010100001110101001010000111000100101000010001100010100,
        0b0000101010011000001010101001100000101001000110000011001000011000,
        0b0011001010010000001110111001000000111001000100000010001110010000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0011101010000000001110110000000000111001100000000000001010000000,
        0b0000100100010100001110010001010000111010000101000010100100010100,
        0b0001001010011000001010010001100000101011100110000010101010011000,
        0b0001001010010000001110111001000000111011100100000001001010010000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0011101010000000001110111000000000111011100000000000000000000000,
        0b0011100100010100001110001001010000111011000101000000000000000000,
        0b0000101010011000001010110001100000101010000110000000000000000000,
        0b0011001010010000001110111001000000111011100100000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0011001010000000001110111000000000111001100000000000001010001110,
        0b0001000100010100001110011001010000100010000101000010101110000010,
        0b0001001010011000001010001001100000110011100110000010100010001100,
        0b0011101010010000001110111001000000100011100100000001000010101110,
        0b0000000000000000000000000000000000000000000000000000000000000000,
        0b0000000000000000000000000000000000000000000000000000000000000000,
    };
    try expect(std.mem.eql(u64, &expected_screen, &chip8.screen));

    // PC should loop with jump instruction
    try expect(chip8.registers.PC == 0x49C);
}
